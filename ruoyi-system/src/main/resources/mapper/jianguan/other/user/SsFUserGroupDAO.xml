<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.common.core.dao.SsFUserGroupDAO">
  <resultMap id="BaseResultMap" type="com.ruoyi.common.core.domain.entity.SsFUserGroup">
    <result column="USERID" jdbcType="INTEGER" property="userid" />
    <result column="GROUPID" jdbcType="INTEGER" property="groupid" />
    <result column="STTIME" jdbcType="TIMESTAMP" property="sttime" />
    <result column="STSTATE" jdbcType="INTEGER" property="ststate" />
    <result column="STORDER" jdbcType="INTEGER" property="storder" />
  </resultMap>

  <resultMap id="userMap" type="com.ruoyi.common.core.domain.entity.SsFUsers">
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="USERNAME" jdbcType="VARCHAR" property="username" />
    <result column="PWD" jdbcType="VARCHAR" property="pwd" />
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="USERCODE" jdbcType="VARCHAR" property="usercode" />
    <result column="STTIME" jdbcType="TIMESTAMP" property="sttime" />
    <result column="STSTATE" jdbcType="INTEGER" property="ststate" />
    <result column="STORDER" jdbcType="INTEGER" property="storder" />
    <result column="ugid" jdbcType="INTEGER" property="ugid" />
  </resultMap>

  <insert id="insert" parameterType="com.ruoyi.common.core.domain.entity.SsFUserGroup">
    insert into ss_f_user_project (USERID, GROUPID, STTIME,
      STSTATE, STORDER)
    values (#{userid,jdbcType=INTEGER}, #{groupid,jdbcType=INTEGER}, #{sttime,jdbcType=TIMESTAMP},
      #{ststate,jdbcType=INTEGER}, #{storder,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.ruoyi.common.core.domain.entity.SsFUserGroup">
    insert into ss_f_user_project
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        USERID,
      </if>
      <if test="groupid != null">
        GROUPID,
      </if>
      <if test="sttime != null">
        STTIME,
      </if>
      <if test="ststate != null">
        STSTATE,
      </if>
      <if test="storder != null">
        STORDER,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="groupid != null">
        #{groupid,jdbcType=INTEGER},
      </if>
      <if test="sttime != null">
        #{sttime,jdbcType=TIMESTAMP},
      </if>
      <if test="ststate != null">
        #{ststate,jdbcType=INTEGER},
      </if>
      <if test="storder != null">
        #{storder,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>

  <delete id="deleteByUserIds" parameterType="java.util.ArrayList">
    delete from ss_f_user_project where userid in
    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </delete>

  <select id="getUserByGroupsIds" resultMap="userMap">
    select a.* from sys_user a
    where a.dept_id in
    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>

  <delete id="deleteProjectsByUser" parameterType="integer">
    delete from ss_f_user_project where userid = #{userid} and
    groupid in
    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </delete>

  <select id="getAllCount" parameterType="string" resultType="integer">
    select count(su.user_id) from sys_user su
        where su.del_flag=0  and su.user_id in
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
          #{item}
        </foreach>
  </select>

  <resultMap id="ClockInCensusReturnMap" type="com.ruoyi.common.core.domain.entity.ClockInCensusReturn">
    <result column="userId" jdbcType="INTEGER" property="userId" />
    <result column="userName" jdbcType="VARCHAR" property="userName" />
    <result column="ststate" jdbcType="INTEGER" property="ststate" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="roleId" jdbcType="INTEGER" property="roleId" />
    <result column="roleName" jdbcType="VARCHAR" property="roleName" />
    <result column="unitId" jdbcType="INTEGER" property="unitId" />
    <result column="unitName" jdbcType="VARCHAR" property="unitName" />
  </resultMap>

  <select id="getCensusList" resultMap="ClockInCensusReturnMap">
          select
          c.user_id as userId, c.user_name as userName,
          e.role_id as roleId, e.role_name as roleName, a.dept_id as unitId,
          a.dept_name as unitName
          from sys_dept a
          LEFT JOIN sys_user c on a.dept_id = c.dept_id
          LEFT JOIN sys_user_role d on c.user_id = d.user_id
          LEFT JOIN sys_role e on d.role_id = e.role_id
          where a.dept_id in
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
          #{item}
        </foreach>
  </select>

  <select id="getClockInCensusList" resultMap="ClockInCensusReturnMap">
    select
    c.user_id as userId, c.user_name as userName, c.update_time as userUpdateTime,
    e.role_id as roleId, e.role_name as roleName, a.dept_id as unitId,
    a.dept_name as unitName
    from sys_dept a
    LEFT JOIN sys_user c on a.dept_id = c.dept_id
    LEFT JOIN sys_user_role d on c.user_id = d.user_id
    LEFT JOIN sys_role e on d.role_id = e.role_id
    where c.del_flag = 0
        AND a.dept_id in
    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>

  <select id="getAllUserCountByGroupIds" resultType="integer">
    select count(a.dept_id) from sys_User a
    where a.dept_id in
    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>

  <select id="getAllUserOnDutyByGroupIds" resultType="integer">
    select count(a.user_id) from sys_User a
    where a.del_flag = 0 and a.user_id in
    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>
</mapper>
